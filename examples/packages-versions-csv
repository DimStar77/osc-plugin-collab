#!/usr/bin/env python
# vim: set ts=4 sw=4 et: coding=UTF-8

#
# Copyright (c) 2008, Novell, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#  * Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#  * Neither the name of the <ORGANIZATION> nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
#
# (Licensed under the simplified BSD license)
#
# Authors: Vincent Untz <vuntz@novell.com>
#

# Outputs a CSV for each package in GNOME:Factory with the following
# information:
# package name; version in openSUSE:Factory; version in GNOME:Factory; upstream version

import os
import sys

import optparse
import sqlite3

if os.getenv('OBS_DISSECTOR_DIR') and os.getenv('OBS_DISSECTOR_DIR') != '':
    OBS_DISSECTOR_DIR=os.getenv('OBS_DISSECTOR_DIR')
else:
    OBS_DISSECTOR_DIR='/tmp/obs-dissector'


def compare_versions_a_gt_b (a, b):
    split_a = a.split('.')
    split_b = b.split('.')

    # the two versions don't have the same format; we don't know how to handle
    # this
    if len(split_a) != len(split_b):
        return a > b

    for i in range(len(split_a)):
        try:
            int_a = int(split_a[i])
            int_b = int(split_b[i])
            if int_a > int_b:
                return True
        except ValueError:
            if split_a[i] > split_b[i]:
                return True

    return False


def get_versions():
    packages = []

    db = sqlite3.connect(os.path.join(OBS_DISSECTOR_DIR, 'obs.db'))
    if not db:
        print >>sys.stderr, 'Could not open database'
        return packages

    db.row_factory = sqlite3.Row
    cursor = db.cursor()

    cursor.execute('''SELECT id FROM %s WHERE name = ?;''' % 'project', ('openSUSE:Factory',))
    row = cursor.fetchone()
    if row:
        oF_id = row['id']
    else:
        print >>sys.stderr, 'No openSUSE:Factory repository in the database'
        cursor.close()
        db.close()
        return packages

    cursor.execute('''SELECT id FROM %s WHERE name = ?;''' % 'project', ('GNOME:Factory',))
    row = cursor.fetchone()
    if row:
        GF_id = row['id']
    else:
        print >>sys.stderr, 'No GNOME:Factory repository in the database'
        cursor.close()
        db.close()
        return packages

    helper_cursor = db.cursor()

    cursor.execute('''SELECT name, version, upstream_version FROM %s WHERE project = ? ORDER BY name;''' % 'srcpackage', (oF_id,))
    for row in cursor:
        oF_version = row['version']
        upstream_version = row['upstream_version']
        name = row['name']

        helper_cursor.execute('''SELECT version FROM %s WHERE project = ? and name = ?;''' % 'srcpackage', (GF_id, name))
        helper_row = helper_cursor.fetchone()
        if helper_row:
            GF_version = helper_row['version']
        else:
            GF_version = ''

        packages.append((name, oF_version, GF_version, upstream_version))

    helper_cursor.close()
    cursor.close()
    db.close()

    return packages

def main(args):
    parser = optparse.OptionParser()

    parser.add_option("-u", "--only-needing-update", action="store_true",
                      dest="needing_update", default=False,
                      help="only show packages needing an update from upstream")

    (options, args) = parser.parse_args()

    packages = get_versions()

    for (name, oF_version, GF_version, upstream_version) in packages:
        if not options.needing_update or (compare_versions_a_gt_b(upstream_version, oF_version) and compare_versions_a_gt_b(upstream_version, GF_version)):
            print '%s;%s;%s;%s;' % (name, oF_version, GF_version, upstream_version)


if __name__ == '__main__':
    try:
      main(sys.argv)
    except KeyboardInterrupt:
      pass
