buildservice:
 + if we queue something twice, then we will really do it twice. We should have
   a way to queue, and then strip the useless elements to minimize data.
 + a project configuration cache can be written twice (eg, when a project is
   devel project for two different projects). This should be avoided since we
   probably expect the first write to win (assuming the first write matches the
   first project in obs.conf).
 + in check_project(), we should probably also look at files that are checked
   out for a package and remove the ones that shouldn't be there.
!+ in _get_package_file_checked_out(), we do not check that the md5sum of the
   file itself is okay. So assuming that we had a file, and we then fail to
   download an update of it, we will never download the update anymore (since
   the old file is still present).
   Solution:
    - remove the file in case of error? (but the database will be incomplete
      for this package)
    - compute the md5 of the file and compare it (expensive)
    - check that the size of the file on disk is the same (cheap, but can be
      wrong)
    - save the metadata of the downloaded files somewhere, so we can easily
      compare them

database:
 + only do one update call if there was a commit and meta change for a package
 + provide the API needed by infoxml so that it doesn't need to do any SQL
   query?

general:
!+ make it possible to queue tasks for a next run. Examples:
    - _analyze_files/_analyze_spec: if a file doesn't exist
    - buildservice: if a download fails
   Those tasks could be written to a file.
   Note that for the buildservice, we will want to use a queue to store the
   data since it will be done in various threads.
   We will need to make sure the database updates those packages on the next
   run too, even if there's no hermes event.
